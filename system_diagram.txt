Approach 1 using ECS:

             +------------+
             |   Client   |
             +------------+
                    │
                    ▼
             +------------+
             |     ALB    |
             +------------+
                    │
                    ▼
             +------------+
             |    ECS     |
             +------------+
                    │
                    ▼
             +------------+
             |     RDS    |
             +------------+
                    │
                    ▼
             +------------+
             |     ECR    |
             +------------+

1. Client: End-user who accesses the Flask app through a web browser.
2. Application Load Balancer (ALB) : This is used to distribute incoming traffic to multiple instances of the Flask app running in Amazon Elastic Container Service (ECS). Load balancers can be set up with target groups, and the Flask app instances can be added to those target groups.
3. Amazon Elastic Container Service (ECS): This is used to run Docker containers of the Flask app. ECS can be configured to use Auto Scaling Groups to automatically scale the number of instances based on traffic load.
4. Amazon RDS: This is used to host the SQLite database used by the Flask app.
5. Amazon Elastic Container Registry (ECR): This is used to store and manage the Docker container images for the Flask app. ECR can be set up to integrate with ECS, so that ECS can automatically pull the latest version of the Docker container image from ECR.
We can blue/green architecture to achieve zero downtime deployment by using the following steps:

Approach 2 using ASG:

                      ┌────────────────┐
                      │    Internet    │
                      └────────────────┘
                               │
                               ▼
                      ┌────────────────┐
                      │     ALB URL    │
                      └────────────────┘
                               │
                               ▼
                      ┌────────────────┐
                      │    ASG (EFS)   │
                      └────────────────┘       
					           │
                               ▼
                      ┌────────────────┐
                      │  EC2 Instances │
                      └────────────────┘
                               │
                               ▼
                      ┌────────────────┐
                      │  Python Flask  │
					  │     in EFS     │
                      └────────────────┘
                               │
                               ▼
                      ┌────────────────┐
                      │     RDS DB     │
                      └────────────────┘

1. Internet: This is the entry point to the system, where users send requests to the web application.
2. Application Load Balancer: An Application Load Balancer (ALB) distributes incoming traffic to multiple EC2 instances. The ALB can also route traffic based on URL, host, and path, which is useful for load balancing traffic to different parts of the application.
3. Auto Scaling Group: The Auto Scaling Group ensures that the number of running EC2 instances can handle the incoming traffic. It automatically scales up or down the number of instances based on CPU utilization or other metrics.
4. EC2 Instance: An EC2 instance runs the web application and communicates with the database. Multiple EC2 instances can be launched in an Auto Scaling Group to handle a large number of requests.
5. Elastic File System (EFS): The Elastic File System provides shared file storage for the EC2 instances. The SQLite database file hello.db can be stored in the EFS to allow all EC2 instances to access the same database.
6. RDS DB: We can use RDS to host the SQLite database used by the web application.